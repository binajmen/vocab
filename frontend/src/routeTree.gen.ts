/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as VerbsIndexImport } from './routes/verbs/index'
import { Route as NounsIndexImport } from './routes/nouns/index'
import { Route as VerbsCreateImport } from './routes/verbs/create'
import { Route as VerbsIdImport } from './routes/verbs/$id'
import { Route as NounsCreateImport } from './routes/nouns/create'
import { Route as NounsIdImport } from './routes/nouns/$id'
import { Route as ConsoleUsersImport } from './routes/console/users'
import { Route as ConsoleUsersIndexImport } from './routes/console/users/index'
import { Route as ConsoleUsersCreateImport } from './routes/console/users/create'
import { Route as ConsoleUsersUseridImport } from './routes/console/users/$user_id'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const VerbsIndexRoute = VerbsIndexImport.update({
  id: '/verbs/',
  path: '/verbs/',
  getParentRoute: () => rootRoute,
} as any)

const NounsIndexRoute = NounsIndexImport.update({
  id: '/nouns/',
  path: '/nouns/',
  getParentRoute: () => rootRoute,
} as any)

const VerbsCreateRoute = VerbsCreateImport.update({
  id: '/verbs/create',
  path: '/verbs/create',
  getParentRoute: () => rootRoute,
} as any)

const VerbsIdRoute = VerbsIdImport.update({
  id: '/verbs/$id',
  path: '/verbs/$id',
  getParentRoute: () => rootRoute,
} as any)

const NounsCreateRoute = NounsCreateImport.update({
  id: '/nouns/create',
  path: '/nouns/create',
  getParentRoute: () => rootRoute,
} as any)

const NounsIdRoute = NounsIdImport.update({
  id: '/nouns/$id',
  path: '/nouns/$id',
  getParentRoute: () => rootRoute,
} as any)

const ConsoleUsersRoute = ConsoleUsersImport.update({
  id: '/console/users',
  path: '/console/users',
  getParentRoute: () => rootRoute,
} as any)

const ConsoleUsersIndexRoute = ConsoleUsersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ConsoleUsersRoute,
} as any)

const ConsoleUsersCreateRoute = ConsoleUsersCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => ConsoleUsersRoute,
} as any)

const ConsoleUsersUseridRoute = ConsoleUsersUseridImport.update({
  id: '/$user_id',
  path: '/$user_id',
  getParentRoute: () => ConsoleUsersRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/console/users': {
      id: '/console/users'
      path: '/console/users'
      fullPath: '/console/users'
      preLoaderRoute: typeof ConsoleUsersImport
      parentRoute: typeof rootRoute
    }
    '/nouns/$id': {
      id: '/nouns/$id'
      path: '/nouns/$id'
      fullPath: '/nouns/$id'
      preLoaderRoute: typeof NounsIdImport
      parentRoute: typeof rootRoute
    }
    '/nouns/create': {
      id: '/nouns/create'
      path: '/nouns/create'
      fullPath: '/nouns/create'
      preLoaderRoute: typeof NounsCreateImport
      parentRoute: typeof rootRoute
    }
    '/verbs/$id': {
      id: '/verbs/$id'
      path: '/verbs/$id'
      fullPath: '/verbs/$id'
      preLoaderRoute: typeof VerbsIdImport
      parentRoute: typeof rootRoute
    }
    '/verbs/create': {
      id: '/verbs/create'
      path: '/verbs/create'
      fullPath: '/verbs/create'
      preLoaderRoute: typeof VerbsCreateImport
      parentRoute: typeof rootRoute
    }
    '/nouns/': {
      id: '/nouns/'
      path: '/nouns'
      fullPath: '/nouns'
      preLoaderRoute: typeof NounsIndexImport
      parentRoute: typeof rootRoute
    }
    '/verbs/': {
      id: '/verbs/'
      path: '/verbs'
      fullPath: '/verbs'
      preLoaderRoute: typeof VerbsIndexImport
      parentRoute: typeof rootRoute
    }
    '/console/users/$user_id': {
      id: '/console/users/$user_id'
      path: '/$user_id'
      fullPath: '/console/users/$user_id'
      preLoaderRoute: typeof ConsoleUsersUseridImport
      parentRoute: typeof ConsoleUsersImport
    }
    '/console/users/create': {
      id: '/console/users/create'
      path: '/create'
      fullPath: '/console/users/create'
      preLoaderRoute: typeof ConsoleUsersCreateImport
      parentRoute: typeof ConsoleUsersImport
    }
    '/console/users/': {
      id: '/console/users/'
      path: '/'
      fullPath: '/console/users/'
      preLoaderRoute: typeof ConsoleUsersIndexImport
      parentRoute: typeof ConsoleUsersImport
    }
  }
}

// Create and export the route tree

interface ConsoleUsersRouteChildren {
  ConsoleUsersUseridRoute: typeof ConsoleUsersUseridRoute
  ConsoleUsersCreateRoute: typeof ConsoleUsersCreateRoute
  ConsoleUsersIndexRoute: typeof ConsoleUsersIndexRoute
}

const ConsoleUsersRouteChildren: ConsoleUsersRouteChildren = {
  ConsoleUsersUseridRoute: ConsoleUsersUseridRoute,
  ConsoleUsersCreateRoute: ConsoleUsersCreateRoute,
  ConsoleUsersIndexRoute: ConsoleUsersIndexRoute,
}

const ConsoleUsersRouteWithChildren = ConsoleUsersRoute._addFileChildren(
  ConsoleUsersRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/console/users': typeof ConsoleUsersRouteWithChildren
  '/nouns/$id': typeof NounsIdRoute
  '/nouns/create': typeof NounsCreateRoute
  '/verbs/$id': typeof VerbsIdRoute
  '/verbs/create': typeof VerbsCreateRoute
  '/nouns': typeof NounsIndexRoute
  '/verbs': typeof VerbsIndexRoute
  '/console/users/$user_id': typeof ConsoleUsersUseridRoute
  '/console/users/create': typeof ConsoleUsersCreateRoute
  '/console/users/': typeof ConsoleUsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/nouns/$id': typeof NounsIdRoute
  '/nouns/create': typeof NounsCreateRoute
  '/verbs/$id': typeof VerbsIdRoute
  '/verbs/create': typeof VerbsCreateRoute
  '/nouns': typeof NounsIndexRoute
  '/verbs': typeof VerbsIndexRoute
  '/console/users/$user_id': typeof ConsoleUsersUseridRoute
  '/console/users/create': typeof ConsoleUsersCreateRoute
  '/console/users': typeof ConsoleUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/console/users': typeof ConsoleUsersRouteWithChildren
  '/nouns/$id': typeof NounsIdRoute
  '/nouns/create': typeof NounsCreateRoute
  '/verbs/$id': typeof VerbsIdRoute
  '/verbs/create': typeof VerbsCreateRoute
  '/nouns/': typeof NounsIndexRoute
  '/verbs/': typeof VerbsIndexRoute
  '/console/users/$user_id': typeof ConsoleUsersUseridRoute
  '/console/users/create': typeof ConsoleUsersCreateRoute
  '/console/users/': typeof ConsoleUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/console/users'
    | '/nouns/$id'
    | '/nouns/create'
    | '/verbs/$id'
    | '/verbs/create'
    | '/nouns'
    | '/verbs'
    | '/console/users/$user_id'
    | '/console/users/create'
    | '/console/users/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/nouns/$id'
    | '/nouns/create'
    | '/verbs/$id'
    | '/verbs/create'
    | '/nouns'
    | '/verbs'
    | '/console/users/$user_id'
    | '/console/users/create'
    | '/console/users'
  id:
    | '__root__'
    | '/'
    | '/console/users'
    | '/nouns/$id'
    | '/nouns/create'
    | '/verbs/$id'
    | '/verbs/create'
    | '/nouns/'
    | '/verbs/'
    | '/console/users/$user_id'
    | '/console/users/create'
    | '/console/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ConsoleUsersRoute: typeof ConsoleUsersRouteWithChildren
  NounsIdRoute: typeof NounsIdRoute
  NounsCreateRoute: typeof NounsCreateRoute
  VerbsIdRoute: typeof VerbsIdRoute
  VerbsCreateRoute: typeof VerbsCreateRoute
  NounsIndexRoute: typeof NounsIndexRoute
  VerbsIndexRoute: typeof VerbsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConsoleUsersRoute: ConsoleUsersRouteWithChildren,
  NounsIdRoute: NounsIdRoute,
  NounsCreateRoute: NounsCreateRoute,
  VerbsIdRoute: VerbsIdRoute,
  VerbsCreateRoute: VerbsCreateRoute,
  NounsIndexRoute: NounsIndexRoute,
  VerbsIndexRoute: VerbsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/console/users",
        "/nouns/$id",
        "/nouns/create",
        "/verbs/$id",
        "/verbs/create",
        "/nouns/",
        "/verbs/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/console/users": {
      "filePath": "console/users.tsx",
      "children": [
        "/console/users/$user_id",
        "/console/users/create",
        "/console/users/"
      ]
    },
    "/nouns/$id": {
      "filePath": "nouns/$id.tsx"
    },
    "/nouns/create": {
      "filePath": "nouns/create.tsx"
    },
    "/verbs/$id": {
      "filePath": "verbs/$id.tsx"
    },
    "/verbs/create": {
      "filePath": "verbs/create.tsx"
    },
    "/nouns/": {
      "filePath": "nouns/index.tsx"
    },
    "/verbs/": {
      "filePath": "verbs/index.tsx"
    },
    "/console/users/$user_id": {
      "filePath": "console/users/$user_id.tsx",
      "parent": "/console/users"
    },
    "/console/users/create": {
      "filePath": "console/users/create.tsx",
      "parent": "/console/users"
    },
    "/console/users/": {
      "filePath": "console/users/index.tsx",
      "parent": "/console/users"
    }
  }
}
ROUTE_MANIFEST_END */
